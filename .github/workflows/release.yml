name: Build artifacts

on:
  push:
    branches:
      - master
    tags:
      - v**

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: "Install NPM packages"
      run: npm ci

    - name: "Build bundle with pkg"
      run: npm run build

    - name: List bundles
      run: ls -al dist

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: bundles
        path: ./dist

  release:
    name: Create Github Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Fetch artifacts
      uses: actions/download-artifact@v2
      with:
        name: bundles
        path: ./dist
    # - name: Get short tag name
    #   uses: jungwinter/split@v1
    #   id: split
    #   with:
    #     msg: ${{ github.ref }}
    #     seperator: /

    #- name: Create Release
    #  id: create_release
    #  uses: ncipollo/release-action@v1
    #  with:
    #    token: ${{ secrets.GITHUB_TOKEN }}
    #    allowUpdates: true
    #    tag: unreleased
    #    # tag: ${{ steps.split.outputs._2 }}
    #    name: Unreleased
    #    commit: ${{ github.sha }}
    #    omitBody: true
    #    draft: false
    #    prerelease: true
    #    artifacts: "dist/*, dist/*.exe"

    - name: Upload Release Assets
      uses: actions/github-script@v2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          //console.log('environment', process.versions, process.env);

          const fs = require('fs').promises;

          //console.log("context:", context);
          const { repo: { owner, repo }, sha } = context;
          //console.log({ owner, repo, sha });

          /*const release = await github.repos.createRelease({
            owner, repo,
            tag_name: process.env.GITHUB_REF,
            draft: true,
            target_commitish: sha
          });*/

          // if (process.env.GITHUB_REF == "refs/heads/master") Use "Unreleased", else create new release

          //console.log('created release', { release });

          for (let file of await fs.readdir('./dist')) {
            if ([".", ".."].includes(file)) continue;

            console.log('Uploading', file, "...");

            await github.repos.uploadReleaseAsset({
              owner, repo,
              //release_id: release.data.id,
              release_id: 35727994, // "Unreleased"
              name: file,
              data: await fs.readFile(`./dist/${file}`)
            });
          }

          console.log("Done.");

  docker:
    name: Build & Publish Docker image
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Fetch artifacts
      uses: actions/download-artifact@v2
      with:
        name: bundles
        path: ./dist

    - name: chmod
      run: chmod +x dist/*

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile-alpine
        push: true
        tags: moleculer/sidecar:latest

    - name: Image digest
      run: "echo 'Pushed image digest: ${{ steps.docker_build.outputs.digest }}'"

  # publish:
  #   needs: [release]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       version: [linux, macos, windows]

  #   steps:
  #   - uses: actions/checkout@v1

  #   - name: Fetch artifacts
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: ${{ matrix.version }}
  #       path: ./${{ matrix.version }}

  #   - name: Build Zip Archives
  #     run: |
  #          mkdir -p workdir/
  #          mv ${{ matrix.version }}/ workdir/v/
  #          cd workdir/v/
  #          chmod 755 v || true
  #          chmod 755 v.exe || true
  #          cd ..
  #          zip -r9 --symlinks ../v_${{ matrix.version }}.zip v/*
  #          cd ..
  #          rm -rf workdir/

  #   - name: Get short tag name
  #     uses: jungwinter/split@v1
  #     id: split
  #     with:
  #       msg: ${{ github.ref }}
  #       seperator: /

  #   - name: Get release
  #     id: get_release_info
  #     uses: leahlundqvist/get-release@v1.3.1
  #     env:
  #       GITHUB_TOKEN: ${{ github.token }}
  #     with:
  #       tag_name: ${{ steps.split.outputs._2 }}

  #   - name: Upload Release Asset
  #     id: upload-release-asset
  #     uses: actions/upload-release-asset@v1.0.1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{ steps.get_release_info.outputs.upload_url }}
  #       asset_path: ./v_${{ matrix.version }}.zip
  #       asset_name: v_${{ matrix.version }}.zip
  #       asset_content_type: application/zip
